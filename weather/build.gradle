apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["compilesdk"]
    defaultConfig {
        applicationId "com.nicholasdoglio.weather"
        minSdkVersion globalConfiguration["minsdk"]
        targetSdkVersion globalConfiguration["targetsdk"]
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        def apiKeysFile = rootProject.file("api.properties")
        def apiKeys = new Properties()
        if (apiKeysFile.exists()) apiKeys.load(new FileInputStream(apiKeysFile))

        all {
            manifestPlaceholders = [PLAY_KEY: apiKeys.getProperty('places_key', 'null')]
            buildConfigField 'String', 'WEATHER_API_KEY', apiKeys.getProperty('weather_key', 'null')
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    def dependencies = rootProject.ext.dependencies
    def testDependencies = rootProject.ext.testDependencies

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation dependencies.kotlin
    implementation dependencies.retrofit
    implementation dependencies.moshiConverter
    implementation dependencies.rxAdapter
    implementation dependencies.rxkotlin
    implementation dependencies.rxjava
    implementation dependencies.rxandroid
    implementation dependencies.appcompat
    implementation dependencies.support
    implementation dependencies.cardview
    implementation dependencies.recyclerview
    implementation dependencies.design
    implementation dependencies.constraint
    implementation dependencies.dagger
    implementation dependencies.daggerAndroid
    implementation dependencies.daggerAndroidSupport
    implementation dependencies.timber
    implementation dependencies.places
    implementation dependencies.epoxy
    implementation dependencies.room
    implementation dependencies.rxRoom
    implementation dependencies.okhttp
    implementation dependencies.okhttpLogger
    debugImplementation dependencies.leakCanaryDebug
    releaseImplementation dependencies.leakCanaryRelease

    kapt dependencies.epoxyKapt
    kapt dependencies.roomKapt
    kapt dependencies.daggerKapt
    kapt dependencies.daggerAndroidKapt

    testImplementation testDependencies.junit
    testImplementation testDependencies.kotlinJunit
    testImplementation testDependencies.mockk
    testImplementation testDependencies.mockRetrofit

    androidTestImplementation testDependencies.rules
    androidTestImplementation testDependencies.runner
    androidTestImplementation testDependencies.espressoIntents
    androidTestImplementation testDependencies.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

// Ensure the no-op dependency is always used in JVM tests.
configurations.all { config ->
    if (config.name.contains('UnitTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}
