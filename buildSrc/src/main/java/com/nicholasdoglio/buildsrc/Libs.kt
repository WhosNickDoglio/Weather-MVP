package com.nicholasdoglio.buildsrc

/**
 * Generated by [gradle-kotlin-dsl-libs](https://github.com/jmfayard/gradle-kotlin-dsl-libs)
 *
 * Run again
 *   `$ ./gradlew syncLibs`
 * to update this file */
object Libs {
    /**
     * [compiler website](https://developer.android.com/topic/libraries/architecture/index.html) */
    const val android_arch_persistence_room_compiler: String =
        "android.arch.persistence.room:compiler:" + Versions.android_arch_persistence_room

    /**
     * [runtime website](https://developer.android.com/topic/libraries/architecture/index.html) */
    const val android_arch_persistence_room_runtime: String =
        "android.arch.persistence.room:runtime:" + Versions.android_arch_persistence_room

    /**
     * [rxjava2 website](https://developer.android.com/topic/libraries/architecture/index.html) */
    const val rxjava2: String =
        "android.arch.persistence.room:rxjava2:" + Versions.android_arch_persistence_room

    /**
     * [epoxy-processor website](https://github.com/airbnb/epoxy) */
    const val epoxy_processor: String =
        "com.airbnb.android:epoxy-processor:" + Versions.com_airbnb_android

    /**
     * [epoxy website](https://github.com/airbnb/epoxy) */
    const val epoxy: String = "com.airbnb.android:epoxy:" + Versions.com_airbnb_android

    /**
     * [constraint-layout website](http://tools.android.com) */
    const val constraint_layout: String =
        "com.android.support.constraint:constraint-layout:" + Versions.constraint_layout

    /**
     * [espresso-core website](https://developer.android.com/testing) */
    const val espresso_core: String =
        "com.android.support.test.espresso:espresso-core:" + Versions.com_android_support_test_espresso

    /**
     * [espresso-intents website](https://developer.android.com/testing) */
    const val espresso_intents: String =
        "com.android.support.test.espresso:espresso-intents:" + Versions.com_android_support_test_espresso

    /**
     * [rules website](https://developer.android.com/testing) */
    const val com_android_support_test_rules: String =
        "com.android.support.test:rules:" + Versions.com_android_support_test

    /**
     * [runner website](https://developer.android.com/testing) */
    const val com_android_support_test_runner: String =
        "com.android.support.test:runner:" + Versions.com_android_support_test

    /**
     * [appcompat-v7 website](http://developer.android.com/tools/extras/support-library.html) */
    const val com_android_support_appcompat_v7: String =
        "com.android.support:appcompat-v7:" + Versions.com_android_support_appcompat_v7

    /**
     * [cardview-v7 website](http://developer.android.com/tools/extras/support-library.html) */
    const val cardview_v7: String = "com.android.support:cardview-v7:" + Versions.cardview_v7

    /**
     * [design website](http://developer.android.com/tools/extras/support-library.html) */
    const val design: String = "com.android.support:design:" + Versions.design

    /**
     * [recyclerview-v7 website](http://developer.android.com/tools/extras/support-library.html) */
    const val recyclerview_v7: String =
        "com.android.support:recyclerview-v7:" + Versions.recyclerview_v7

    /**
     * [support-v4 website](http://developer.android.com/tools/extras/support-library.html) */
    const val support_v4: String = "com.android.support:support-v4:" + Versions.support_v4

    /**
     * [gradle website](https://developer.android.com/studio) */
    const val com_android_tools_build_gradle: String =
        "com.android.tools.build:gradle:" + Versions.com_android_tools_build_gradle

    /**
     * [lint-gradle website](https://developer.android.com/studio) */
    const val lint_gradle: String = "com.android.tools.lint:lint-gradle:" + Versions.lint_gradle

    const val play_services_places: String =
        "com.google.android.gms:play-services-places:" + Versions.play_services_places

    /**
     * [dagger-android-processor website](https://github.com/google/dagger) */
    const val dagger_android_processor: String =
        "com.google.dagger:dagger-android-processor:" + Versions.com_google_dagger

    /**
     * [dagger-android-support website](https://github.com/google/dagger) */
    const val dagger_android_support: String =
        "com.google.dagger:dagger-android-support:" + Versions.com_google_dagger

    /**
     * [dagger-android website](https://github.com/google/dagger) */
    const val dagger_android: String =
        "com.google.dagger:dagger-android:" + Versions.com_google_dagger

    /**
     * [dagger-compiler website](https://github.com/google/dagger) */
    const val dagger_compiler: String =
        "com.google.dagger:dagger-compiler:" + Versions.com_google_dagger

    /**
     * [dagger website](https://github.com/google/dagger) */
    const val dagger: String = "com.google.dagger:dagger:" + Versions.com_google_dagger

    /**
     * [threetenabp website](https://github.com/JakeWharton/ThreeTenABP/) */
    const val threetenabp: String =
        "com.jakewharton.threetenabp:threetenabp:" + Versions.threetenabp

    /**
     * [timber website](https://github.com/JakeWharton/timber) */
    const val timber: String = "com.jakewharton.timber:timber:" + Versions.timber

    /**
     * [leakcanary-android-no-op website](http://github.com/square/leakcanary/) */
    const val leakcanary_android_no_op: String =
        "com.squareup.leakcanary:leakcanary-android-no-op:" + Versions.com_squareup_leakcanary

    /**
     * [leakcanary-android website](http://github.com/square/leakcanary/) */
    const val leakcanary_android: String =
        "com.squareup.leakcanary:leakcanary-android:" + Versions.com_squareup_leakcanary

    /**
     * [moshi-kotlin-codegen website](https://github.com/square/moshi) */
    const val moshi_kotlin_codegen: String =
        "com.squareup.moshi:moshi-kotlin-codegen:" + Versions.com_squareup_moshi

    /**
     * [moshi website](https://github.com/square/moshi) */
    const val moshi: String = "com.squareup.moshi:moshi:" + Versions.com_squareup_moshi

    /**
     * [logging-interceptor website](https://github.com/square/okhttp) */
    const val logging_interceptor: String =
        "com.squareup.okhttp3:logging-interceptor:" + Versions.com_squareup_okhttp3

    /**
     * [okhttp website](https://github.com/square/okhttp) */
    const val okhttp: String = "com.squareup.okhttp3:okhttp:" + Versions.com_squareup_okhttp3

    /**
     * [adapter-rxjava2 website](https://github.com/square/retrofit/) */
    const val adapter_rxjava2: String =
        "com.squareup.retrofit2:adapter-rxjava2:" + Versions.com_squareup_retrofit2

    /**
     * [converter-moshi website](https://github.com/square/retrofit/) */
    const val converter_moshi: String =
        "com.squareup.retrofit2:converter-moshi:" + Versions.com_squareup_retrofit2

    /**
     * [retrofit-mock website](https://github.com/square/retrofit/) */
    const val retrofit_mock: String =
        "com.squareup.retrofit2:retrofit-mock:" + Versions.com_squareup_retrofit2

    /**
     * [mockk website](http://mockk.io) */
    const val mockk: String = "io.mockk:mockk:" + Versions.mockk

    /**
     * [rxandroid website](https://github.com/ReactiveX/RxAndroid) */
    const val rxandroid: String = "io.reactivex.rxjava2:rxandroid:" + Versions.rxandroid

    /**
     * [rxjava website](https://github.com/ReactiveX/RxJava) */
    const val rxjava: String = "io.reactivex.rxjava2:rxjava:" + Versions.rxjava

    /**
     * [rxkotlin website](https://github.com/ReactiveX/RxKotlin) */
    const val rxkotlin: String = "io.reactivex.rxjava2:rxkotlin:" + Versions.rxkotlin

    const val jmfayard_github_io_gradle_kotlin_dsl_libs_gradle_plugin: String =
        "jmfayard.github.io.gradle-kotlin-dsl-libs:jmfayard.github.io.gradle-kotlin-dsl-libs.gradle.plugin:" + Versions.jmfayard_github_io_gradle_kotlin_dsl_libs_gradle_plugin

    /**
     * [junit website](http://junit.org) */
    const val junit: String = "junit:junit:" + Versions.junit

    const val org_gradle_kotlin_kotlin_dsl_gradle_plugin: String =
        "org.gradle.kotlin.kotlin-dsl:org.gradle.kotlin.kotlin-dsl.gradle.plugin:" + Versions.org_gradle_kotlin_kotlin_dsl_gradle_plugin

    /**
     * [kotlin-android-extensions-runtime website](https://kotlinlang.org/) */
    const val kotlin_android_extensions_runtime: String =
        "org.jetbrains.kotlin:kotlin-android-extensions-runtime:" + Versions.org_jetbrains_kotlin

    /**
     * [kotlin-android-extensions website](https://kotlinlang.org/) */
    const val kotlin_android_extensions: String =
        "org.jetbrains.kotlin:kotlin-android-extensions:" + Versions.org_jetbrains_kotlin

    /**
     * [kotlin-annotation-processing-gradle website](https://kotlinlang.org/) */
    const val kotlin_annotation_processing_gradle: String =
        "org.jetbrains.kotlin:kotlin-annotation-processing-gradle:" + Versions.org_jetbrains_kotlin

    /**
     * [kotlin-gradle-plugin website](https://kotlinlang.org/) */
    const val kotlin_gradle_plugin: String =
        "org.jetbrains.kotlin:kotlin-gradle-plugin:" + Versions.org_jetbrains_kotlin

    /**
     * [kotlin-reflect website](https://kotlinlang.org/) */
    const val kotlin_reflect: String =
        "org.jetbrains.kotlin:kotlin-reflect:" + Versions.org_jetbrains_kotlin

    /**
     * [kotlin-sam-with-receiver website](https://kotlinlang.org/) */
    const val kotlin_sam_with_receiver: String =
        "org.jetbrains.kotlin:kotlin-sam-with-receiver:" + Versions.org_jetbrains_kotlin

    /**
     * [kotlin-scripting-compiler-embeddable website](https://kotlinlang.org/) */
    const val kotlin_scripting_compiler_embeddable: String =
        "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:" + Versions.org_jetbrains_kotlin

    /**
     * [kotlin-stdlib-jdk8 website](https://kotlinlang.org/) */
    const val kotlin_stdlib_jdk8: String =
        "org.jetbrains.kotlin:kotlin-stdlib-jdk8:" + Versions.org_jetbrains_kotlin

    /**
     * [kotlin-test-junit website](https://kotlinlang.org/) */
    const val kotlin_test_junit: String =
        "org.jetbrains.kotlin:kotlin-test-junit:" + Versions.org_jetbrains_kotlin

    /**
     * [junit-jupiter-api website](http://junit.org/junit5/) */
    const val junit_jupiter_api: String =
        "org.junit.jupiter:junit-jupiter-api:" + Versions.junit_jupiter_api
}
